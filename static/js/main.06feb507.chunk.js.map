{"version":3,"sources":["services/filmService.ts","components/FilmItem.tsx","components/FilmPreview.tsx","components/FavoriteFilm.tsx","components/FavoritesModal.tsx","components/ErrorMessage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["filmService","getFilms","saveFilmToStorage","key","film","favoriteFilms","loadFilmsFromStorage","some","filmToFind","episode_id","title","localStorage","setItem","JSON","stringify","a","axios","get","films","data","results","item","getItem","parse","FilmItem","selectFilm","className","onClick","FilmPreview","addToFavorites","opening_crawl","FavoriteFilm","FavoritesModal","useState","setFilms","useEffect","getFavoritesFilms","favoriteilms","map","ErrorMessage","filmTitle","App","selectedFilm","setSelectedFilm","isFavoritesModalOpen","setIsFavoritesModalOpen","errorMessageModalOpen","setErrorMessageModalOpen","getFilmsFromService","errorMessage","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06feb507.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { Film } from '../types/film.type'\r\n\r\nexport const filmService = {\r\n    getFilms,\r\n    saveFilmToStorage,\r\n    loadFilmsFromStorage\r\n}\r\n\r\nasync function getFilms(): Promise<any> {\r\n    const films = await axios.get('https://swapi.dev/api/films/')\r\n    return films.data.results\r\n}\r\n\r\nfunction saveFilmToStorage(key: string, film: Film): void | string {\r\n    let favoriteFilms: Film[] | [] = loadFilmsFromStorage(key) ? loadFilmsFromStorage(key) : []\r\n    const isFilmFavorite: boolean = favoriteFilms.some(filmToFind => filmToFind.episode_id === film.episode_id)\r\n    if (isFilmFavorite) return `${film.title}`;\r\n    favoriteFilms = [film, ...favoriteFilms]\r\n    localStorage.setItem(key, JSON.stringify(favoriteFilms))\r\n}\r\n\r\nfunction loadFilmsFromStorage(key: string) {\r\n    var item = localStorage.getItem(key);\r\n    var val = item ? JSON.parse(item) : null\r\n    return val;\r\n}\r\n\r\n","import { Film } from \"../types/film.type\";\r\n\r\ninterface Props {\r\n    film: Film;\r\n    selectFilm: (film: Film) => void\r\n}\r\n\r\nexport function FilmItem({ film, selectFilm }: Props) {\r\n\r\n    return (\r\n        <div className=\"film-item-box\" onClick={() => selectFilm(film)}>\r\n            <p>{film.title}</p>\r\n        </div>\r\n    )\r\n}","import { Film } from \"../types/film.type\";\r\n\r\ninterface Props {\r\n    film: Film;\r\n    addToFavorites: (film: Film) => void | undefined\r\n}\r\n\r\n\r\nexport function FilmPreview({ film, addToFavorites }: Props) {\r\n    return (\r\n        <div className=\"film-preview-box\">\r\n            <h1>{film.title}</h1>\r\n            <p>{film.opening_crawl}</p>\r\n            <button onClick={() => addToFavorites(film)}>Add to favorites</button>\r\n        </div>\r\n    )\r\n}\r\n","import { Film } from \"../types/film.type\";\r\n\r\ninterface Props {\r\n    film: Film;\r\n}\r\n\r\nexport function FavoriteFilm({ film }: Props) {\r\n    return (\r\n        <div className=\"favorite-film-box\">\r\n            <h3>{film.title}</h3>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { filmService } from \"../services/filmService\"\r\nimport { Film } from \"../types/film.type\"\r\nimport { FavoriteFilm } from \"./FavoriteFilm\"\r\n\r\nexport function FavoritesModal() {\r\n\r\n    const [films, setFilms] = useState<Film[] | null>(null)\r\n\r\n    useEffect(() => {\r\n        getFavoritesFilms()\r\n    }, [])\r\n\r\n    const getFavoritesFilms = () => {\r\n        const favoriteilms = filmService.loadFilmsFromStorage('favoriteFilms')\r\n        setFilms(favoriteilms)\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorites-modal-box\">\r\n            {films?.map(film => <FavoriteFilm key={film.episode_id} film={film} />)}\r\n        </div>\r\n    )\r\n}\r\n","\r\ninterface Props {\r\n    filmTitle: string\r\n}\r\n\r\nexport function ErrorMessage({ filmTitle }: Props) {\r\n    return (\r\n        <div className=\"error-message-modal-box\">\r\n            <p>{filmTitle} is already a favorite film!</p>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport { filmService } from './services/filmService';\nimport { Film } from './types/film.type';\nimport { FilmItem } from './components/FilmItem';\nimport { FilmPreview } from './components/FilmPreview';\nimport { FavoritesModal } from './components/FavoritesModal';\nimport { ErrorMessage } from './components/ErrorMessage';\n\nfunction App() {\n\n  const [films, setFilms] = useState<Film[] | null>()\n  const [selectedFilm, setSelectedFilm] = useState<Film | null>()\n  const [isFavoritesModalOpen, setIsFavoritesModalOpen] = useState<boolean>(false)\n  const [errorMessageModalOpen, setErrorMessageModalOpen] = useState<string | undefined>('')\n\n  useEffect(() => {\n    getFilmsFromService()\n  }, [])\n\n  const getFilmsFromService = async () => {\n    const films = await filmService.getFilms()\n    setFilms(films)\n  }\n\n  const selectFilm = (film: Film): void => {\n    setSelectedFilm(film)\n  }\n\n  const addToFavorites = (film: Film): void => {\n    const errorMessage = filmService.saveFilmToStorage('favoriteFilms', film)\n    if (errorMessage) {\n      setErrorMessageModalOpen(errorMessage)\n      setTimeout(() => {\n        setErrorMessageModalOpen('')\n      }, 3000)\n    } \n  }\n\n  return (\n    <div className=\"app\">\n      <button className=\"show-favorites-films-btn\" onClick={() => { setIsFavoritesModalOpen(!isFavoritesModalOpen) }}>My Favorite Films</button>\n      {isFavoritesModalOpen && <FavoritesModal />}\n      {films?.map(film => <FilmItem key={film.episode_id} film={film} selectFilm={selectFilm} />)}\n      {selectedFilm && <FilmPreview film={selectedFilm} addToFavorites={addToFavorites} />}\n      {errorMessageModalOpen && <ErrorMessage filmTitle={errorMessageModalOpen} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}