{"version":3,"sources":["services/filmService.ts","components/FilmItem.tsx","components/FilmPreview.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["filmService","getFilms","a","axios","get","films","data","results","FilmItem","film","selectFilm","className","onClick","title","FilmPreview","opening_crawl","App","useState","setFilms","selectedFilm","setSelectedFilm","useEffect","getFilmsFromService","map","episode_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAEaA,EAAc,CACvBC,S,wFAGJ,4BAAAC,EAAA,sEACwBC,IAAMC,IAAI,gCADlC,cACUC,EADV,yBAEWA,EAAMC,KAAKC,SAFtB,4C,iCCCO,SAASC,EAAT,GAAgD,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,WAE7B,OACI,qBAAKC,UAAU,gBAAgBC,QAAS,kBAAMF,EAAWD,IAAzD,SACI,4BAAIA,EAAKI,UCJd,SAASC,EAAT,GAAuC,IAAhBL,EAAe,EAAfA,KAC1B,OACI,sBAAKE,UAAU,mBAAf,UACI,6BAAKF,EAAKI,QACV,4BAAIJ,EAAKM,mBCuBNC,MA3Bf,WAEE,MAA0BC,qBAA1B,mBAAOZ,EAAP,KAAca,EAAd,KACA,EAAwCD,qBAAxC,mBAAOE,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAmB,uCAAG,4BAAApB,EAAA,sEACNF,EAAYC,WADN,OACpBI,EADoB,OAE1Ba,EAASb,GAFiB,2CAAH,qDAKnBK,EAAa,SAACD,GAClBW,EAAgBX,IAIlB,OACE,sBAAKE,UAAU,MAAf,iBACGN,QADH,IACGA,OADH,EACGA,EAAOkB,KAAI,SAAAd,GAAI,OAAI,cAACD,EAAD,CAAgCC,KAAMA,EAAMC,WAAYA,GAAzCD,EAAKe,eACvCL,GAAgB,cAACL,EAAD,CAAaL,KAAMU,QCf3BM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8b492d7.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const filmService = {\r\n    getFilms\r\n}\r\n\r\nasync function getFilms(): Promise<any> {\r\n    const films = await axios.get('https://swapi.dev/api/films/')\r\n    return films.data.results\r\n}\r\n\r\n","import { Film } from \"../types/film.type\";\r\n\r\ninterface Props {\r\n    film: Film;\r\n    selectFilm: (film: Film) => void\r\n}\r\n\r\nexport function FilmItem({ film, selectFilm }: Props) {\r\n\r\n    return (\r\n        <div className=\"film-item-box\" onClick={() => selectFilm(film)}>\r\n            <p>{film.title}</p>\r\n        </div>\r\n    )\r\n}","import { Film } from \"../types/film.type\";\r\n\r\ninterface Props {\r\n    film: Film;\r\n}\r\n\r\n\r\nexport function FilmPreview({ film }: Props) {\r\n    return (\r\n        <div className=\"film-preview-box\">\r\n            <h1>{film.title}</h1>\r\n            <p>{film.opening_crawl}</p>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport { useEffect, useState } from 'react';\nimport { filmService } from './services/filmService';\nimport { Film } from './types/film.type';\nimport { FilmItem } from './components/FilmItem';\nimport { FilmPreview } from './components/FilmPreview';\n\nfunction App() {\n\n  const [films, setFilms] = useState<Film[] | null>()\n  const [selectedFilm, setSelectedFilm] = useState<Film | null>()\n\n  useEffect(() => {\n    getFilmsFromService()\n  }, [])\n\n  const getFilmsFromService = async () => {\n    const films = await filmService.getFilms()\n    setFilms(films)\n  }\n\n  const selectFilm = (film: Film): void => {\n    setSelectedFilm(film)\n  }\n\n\n  return (\n    <div className=\"app\">\n      {films?.map(film => <FilmItem key={film.episode_id} film={film} selectFilm={selectFilm} />)}\n      {selectedFilm && <FilmPreview film={selectedFilm} />}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}