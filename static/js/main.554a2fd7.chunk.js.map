{"version":3,"sources":["services/filmService.ts","components/FilmItem.tsx","components/FilmPreview.tsx","constants.ts","components/FavoriteFilm.tsx","components/FavoritesModal.tsx","components/UserNotification.tsx","assets/img/logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["filmService","getFilms","addFilmToStorage","key","film","favoriteFilms","loadFilmFromStorage","some","filmToFind","episode_id","message","title","status","localStorage","setItem","JSON","stringify","removeFilmFromStorage","films","filter","a","axios","get","data","results","getItem","parse","FilmItem","selectFilm","className","onClick","FilmPreview","addToFavorites","opening_crawl","FAVORITE_FILMS_KEY","FavoriteFilm","removeFavoriteFilm","FavoritesModal","setIsFavoritesModalOpen","useState","setFavoriteFilms","useEffect","getFavoritesFilms","favoriteilms","length","map","UserNotification","userMessage","App","setFilms","isFavoritesModalOpen","selectedFilm","setSelectedFilm","showFavoriteMessage","setShowFavoriteMessage","setUserMessage","getFilmsFromService","console","error","showUserMessage","setTimeout","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.554a2fd7.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { Film } from '../types/film.type'\r\nimport { UserMessage } from '../types/userMessage.type'\r\n\r\nexport const filmService = {\r\n    getFilms,\r\n    addFilmToStorage,\r\n    removeFilmFromStorage,\r\n    loadFilmFromStorage\r\n}\r\n\r\nasync function getFilms(): Promise<Film[]> {\r\n        const films = await axios.get('https://swapi.dev/api/films/')\r\n        return films.data.results\r\n}\r\n\r\nfunction addFilmToStorage(key: string, film: Film): UserMessage {\r\n    let favoriteFilms: Film[] = loadFilmFromStorage(key) ? loadFilmFromStorage(key) : []\r\n    const isFilmFavorite: boolean = favoriteFilms.some(filmToFind => filmToFind.episode_id === film.episode_id)\r\n    if (isFilmFavorite) return { message: `${film.title} is already a favorite film`, status: 'error' };\r\n    favoriteFilms = [film, ...favoriteFilms]\r\n    localStorage.setItem(key, JSON.stringify(favoriteFilms))\r\n    return { message: `${film.title} has added to your favorite films!`, status: 'success' };\r\n}\r\n\r\nfunction removeFilmFromStorage(key: string, film: Film): Film[] {\r\n    let films: Film[] = loadFilmFromStorage(key)\r\n    films = films.filter(filmToFind => filmToFind.episode_id !== film.episode_id)\r\n    localStorage.setItem(key, JSON.stringify(films))\r\n    return films\r\n}\r\n\r\nfunction loadFilmFromStorage(key: string) {\r\n    const films = localStorage.getItem(key);\r\n    const value = films ? JSON.parse(films) : null\r\n    return value;\r\n}\r\n\r\n","import { Film } from \"../types/film.type\";\r\n\r\ninterface FilmItemProps {\r\n    film: Film;\r\n    selectFilm: (film: Film) => void\r\n}\r\n\r\nexport function FilmItem({ film, selectFilm }: FilmItemProps) {\r\n\r\n    return (\r\n        <div className=\"film-item-box\" onClick={() => selectFilm(film)}>\r\n            <p>{film.title}</p>\r\n        </div>\r\n    )\r\n}","import { Film } from \"../types/film.type\";\r\n\r\ninterface FilmPreviewProps {\r\n    film: Film;\r\n    addToFavorites: (film: Film) => void | undefined\r\n}\r\n\r\n\r\nexport function FilmPreview({ film, addToFavorites }: FilmPreviewProps) {\r\n    return (\r\n        <div className=\"film-preview-box\">\r\n            <h1>{film.title}</h1>\r\n            <p>{film.opening_crawl}</p>\r\n            <button onClick={() => addToFavorites(film)}>Add to favorites</button>\r\n        </div>\r\n    )\r\n}\r\n","export const FAVORITE_FILMS_KEY = 'favoriteFilms'","import { Film } from \"../types/film.type\";\r\n\r\ninterface FavoriteFilmProps {\r\n    film: Film;\r\n    removeFavoriteFilm: (film: Film) => void\r\n}\r\n\r\nexport function FavoriteFilm({ film, removeFavoriteFilm }: FavoriteFilmProps) {\r\n    return (\r\n        <div className=\"favorite-film-box\">\r\n            <h3>{film.title}</h3>\r\n            <button className=\"remove-film-btn\" onClick={() => removeFavoriteFilm(film)}>Delete</button>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { FAVORITE_FILMS_KEY } from \"../constants\"\r\nimport { filmService } from \"../services/filmService\"\r\nimport { Film } from \"../types/film.type\"\r\nimport { FavoriteFilm } from \"./FavoriteFilm\"\r\n\r\ninterface FavoritesModalProps {\r\n    setIsFavoritesModalOpen: (value: boolean) => void\r\n}\r\n\r\nexport function FavoritesModal({ setIsFavoritesModalOpen }: FavoritesModalProps) {\r\n\r\n    const [favoriteFilms, setFavoriteFilms] = useState<Film[] | null>(null)\r\n\r\n    useEffect(() => {\r\n        getFavoritesFilms()\r\n    }, [])\r\n\r\n\r\n    const getFavoritesFilms = () => {\r\n        const favoriteilms = filmService.loadFilmFromStorage(FAVORITE_FILMS_KEY)\r\n        setFavoriteFilms(favoriteilms)\r\n    }\r\n\r\n    const removeFavoriteFilm = (film: Film): void => {\r\n        const films = filmService.removeFilmFromStorage(FAVORITE_FILMS_KEY, film)\r\n        setFavoriteFilms(films)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {<div className=\"favorites-modal-box\">\r\n                <h1>My Favorite Films</h1>\r\n                <div className=\"modal-films-list\">\r\n                    {favoriteFilms?.length === 0 ? <p>You have no favorite films.</p> : favoriteFilms?.map(film => <FavoriteFilm\r\n                        key={film.episode_id}\r\n                        film={film}\r\n                        removeFavoriteFilm={removeFavoriteFilm} />)}\r\n                </div>\r\n                <i onClick={() => setIsFavoritesModalOpen(false)} className=\"fas close-modal-btn fa-times\"></i>\r\n            </div>}\r\n\r\n        </div>\r\n    )\r\n}\r\n","import { UserMessage } from \"../types/userMessage.type\";\r\n\r\ninterface UserNotificationProps {\r\n    userMessage: UserMessage | null\r\n}\r\n\r\nexport function UserNotification({ userMessage }: UserNotificationProps) {\r\n    return (\r\n        <div className={userMessage?.status === 'error' ? \"error-message-modal-box\" : \"success-message-modal-box\"}>\r\n            <p>{userMessage?.message}</p>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.86ad8c03.png\";","import './assets/scss/global.scss';\nimport { useEffect, useState } from 'react';\nimport { filmService } from './services/filmService';\nimport { Film } from './types/film.type';\nimport { FilmItem } from './components/FilmItem';\nimport { FilmPreview } from './components/FilmPreview';\nimport { FavoritesModal } from './components/FavoritesModal';\nimport { FAVORITE_FILMS_KEY } from './constants';\nimport { UserMessage } from './types/userMessage.type';\nimport { UserNotification } from './components/UserNotification';\nimport logo from './assets/img/logo.png';\n\nfunction App() {\n\n  const [films, setFilms] = useState<Film[] | null>()\n  const [isFavoritesModalOpen, setIsFavoritesModalOpen] = useState(false)\n  const [selectedFilm, setSelectedFilm] = useState<Film | null>()\n  const [showFavoriteMessage, setShowFavoriteMessage] = useState<boolean>(false)\n  const [userMessage, setUserMessage] = useState<UserMessage | null>(null)\n\n  useEffect(() => {\n    getFilmsFromService()\n  }, [])\n\n  const getFilmsFromService = async () => {\n    try {\n      const films = await filmService.getFilms()\n      setFilms(films)\n    } catch (error) {\n      console.error(error)\n      showUserMessage({ message: 'There seems to be a problem with the server, please try again', status: 'error' })\n      return;\n    }    \n  }\n\n  const selectFilm = (film: Film): void => setSelectedFilm(film)\n\n  const showUserMessage = (userMessage: UserMessage) => {\n    setUserMessage(userMessage)\n    setShowFavoriteMessage(true)\n    setTimeout(() => {\n      setShowFavoriteMessage(false)\n    }, 4000)\n  }\n\n  const addToFavorites = (film: Film): void => {\n    const userMessage: UserMessage = filmService.addFilmToStorage(FAVORITE_FILMS_KEY, film)\n    showUserMessage(userMessage)\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <img className=\"logo-img\" src={logo} alt=\"\" />\n        <button className=\"show-favorites-films-btn\" onClick={() => setIsFavoritesModalOpen(!isFavoritesModalOpen)}>My Favorite Films</button>\n      </div>\n      {isFavoritesModalOpen && <FavoritesModal setIsFavoritesModalOpen={setIsFavoritesModalOpen} />}\n      {showFavoriteMessage && <UserNotification userMessage={userMessage} />}\n      <div className=\"main-container\">\n        <div className=\"film-table-list-box\">\n          {films?.map(film => <FilmItem key={film.episode_id} film={film} selectFilm={selectFilm} />)}\n        </div>\n        {selectedFilm ? <FilmPreview film={selectedFilm} addToFavorites={addToFavorites} /> :\n          <h2 className=\"missing-films-message\">Click On One Of The Films...</h2>}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}