{"version":3,"sources":["services/filmService.ts","components/FilmItem.tsx","components/FilmPreview.tsx","constans.ts","components/FavoriteFilm.tsx","components/FavoritesModal.tsx","components/ErrorMessage.tsx","assets/img/logo.png","App.tsx","reportWebVitals.ts","index.tsx"],"names":["filmService","getFilms","saveFilmToStorage","key","film","favoriteFilms","loadFilmFromStorage","some","filmToFind","episode_id","title","localStorage","setItem","JSON","stringify","a","axios","get","films","data","results","item","getItem","parse","FilmItem","selectFilm","className","onClick","FilmPreview","addToFavorites","opening_crawl","FAVORITE_FILMS_KEY","FavoriteFilm","FavoritesModal","useState","setFilms","useEffect","getFavoritesFilms","favoriteilms","map","ErrorMessage","message","App","selectedFilm","setSelectedFilm","isFavoritesModalOpen","setIsFavoritesModalOpen","errorMessage","setErrorMessage","getFilmsFromService","src","logo","alt","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa4c1abe.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport { Film } from '../types/film.type'\r\n\r\nexport const filmService = {\r\n    getFilms,\r\n    saveFilmToStorage,\r\n    loadFilmFromStorage\r\n}\r\n\r\nasync function getFilms(): Promise<Film[]> {\r\n    const films = await axios.get('https://swapi.dev/api/films/')\r\n    return films.data.results\r\n}\r\n\r\nfunction saveFilmToStorage(key: string, film: Film): void | string {\r\n    let favoriteFilms: Film[] = loadFilmFromStorage(key) ? loadFilmFromStorage(key) : []\r\n    const isFilmFavorite: boolean = favoriteFilms.some(filmToFind => filmToFind.episode_id === film.episode_id)\r\n    if (isFilmFavorite) return `${film.title} is already a favorite film`;\r\n    favoriteFilms = [film, ...favoriteFilms]\r\n    localStorage.setItem(key, JSON.stringify(favoriteFilms))\r\n}\r\n\r\nfunction loadFilmFromStorage(key: string) {\r\n    const item = localStorage.getItem(key);\r\n    const val = item ? JSON.parse(item) : null\r\n    return val;\r\n}\r\n\r\n","import { Film } from \"../types/film.type\";\r\n\r\ninterface FilmItemProps {\r\n    film: Film;\r\n    selectFilm: (film: Film) => void\r\n}\r\n\r\nexport function FilmItem({ film, selectFilm }: FilmItemProps) {\r\n\r\n    return (\r\n        <div className=\"film-item-box\" onClick={() => selectFilm(film)}>\r\n            <p>{film.title}</p>\r\n        </div>\r\n    )\r\n}","import { Film } from \"../types/film.type\";\r\n\r\ninterface FilmPreviewProps {\r\n    film: Film;\r\n    addToFavorites: (film: Film) => void | undefined\r\n}\r\n\r\n\r\nexport function FilmPreview({ film, addToFavorites }: FilmPreviewProps) {\r\n    return (\r\n        <div className=\"film-preview-box\">\r\n            <h1>{film.title}</h1>\r\n            <p>{film.opening_crawl}</p>\r\n            <button onClick={() => addToFavorites(film)}>Add to favorites</button>\r\n        </div>\r\n    )\r\n}\r\n","export const FAVORITE_FILMS_KEY = 'favoriteFilms'","import { Film } from \"../types/film.type\";\r\n\r\ninterface FavoriteFilmProps {\r\n    film: Film;\r\n}\r\n\r\nexport function FavoriteFilm({ film }: FavoriteFilmProps) {\r\n    return (\r\n        <div className=\"favorite-film-box\">\r\n            <h3>{film.title}</h3>\r\n        </div>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { FAVORITE_FILMS_KEY } from \"../constans\"\r\nimport { filmService } from \"../services/filmService\"\r\nimport { Film } from \"../types/film.type\"\r\nimport { FavoriteFilm } from \"./FavoriteFilm\"\r\n\r\nexport function FavoritesModal() {\r\n\r\n    const [films, setFilms] = useState<Film[] | null>(null)\r\n\r\n    useEffect(() => {\r\n        getFavoritesFilms()\r\n    }, [])\r\n\r\n    const getFavoritesFilms = () => {\r\n        const favoriteilms = filmService.loadFilmFromStorage(FAVORITE_FILMS_KEY)\r\n        setFilms(favoriteilms)\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorites-modal-box\">\r\n            {films?.map(film => <FavoriteFilm key={film.episode_id} film={film} />)}\r\n        </div>\r\n    )\r\n}\r\n","\r\ninterface Props {\r\n    message: string\r\n}\r\n\r\nexport function ErrorMessage({ message }: Props) {\r\n    return (\r\n        <div className=\"error-message-modal-box\">\r\n            <p>{message}</p>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo.86ad8c03.png\";","import './assets/scss/global.scss';\nimport { useEffect, useState } from 'react';\nimport { filmService } from './services/filmService';\nimport { Film } from './types/film.type';\nimport { FilmItem } from './components/FilmItem';\nimport { FilmPreview } from './components/FilmPreview';\nimport { FavoritesModal } from './components/FavoritesModal';\nimport { ErrorMessage } from './components/ErrorMessage';\nimport { FAVORITE_FILMS_KEY } from './constans';\nimport logo from './assets/img/logo.png';\n\nfunction App() {\n\n  const [films, setFilms] = useState<Film[] | null>()\n  const [selectedFilm, setSelectedFilm] = useState<Film | null>()\n  const [isFavoritesModalOpen, setIsFavoritesModalOpen] = useState<boolean>(false)\n  const [errorMessage, setErrorMessage] = useState<string | undefined>('')\n\n  useEffect(() => {\n    getFilmsFromService()\n  }, [])\n\n  const getFilmsFromService = async () => {\n    const films = await filmService.getFilms()\n    setFilms(films)\n  }\n\n  const selectFilm = (film: Film): void => setSelectedFilm(film)\n\n  const renderFavoritesButton = () => {\n    return <button className=\"show-favorites-films-btn\" onClick={() => setIsFavoritesModalOpen(!isFavoritesModalOpen)}>My Favorite Films</button>\n  }\n\n  const renderLogoImg = () => {\n    return <img className=\"logo-img\" src={logo} alt=\"\" />\n  }\n\n  const addToFavorites = (film: Film): void => {\n    const errorMessage = filmService.saveFilmToStorage(FAVORITE_FILMS_KEY, film)\n    if (errorMessage) {\n      setErrorMessage(errorMessage)\n      setTimeout(() => {\n        setErrorMessage('')\n      }, 3000)\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      {renderLogoImg()}\n      {renderFavoritesButton()}\n      {isFavoritesModalOpen && <FavoritesModal />}\n      {errorMessage && <ErrorMessage message={errorMessage} />}\n      <div className=\"main-container\">\n        <div className=\"film-table-list-box\">\n          {films?.map(film => <FilmItem key={film.episode_id} film={film} selectFilm={selectFilm} />)}\n        </div>\n        {selectedFilm && <FilmPreview film={selectedFilm} addToFavorites={addToFavorites} />}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}